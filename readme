1.1 
	Implement an algorithm to determine if a string has all unique characters. What if you can not use additional data structures?
	comments: here I used a c++ map, but in fact, as it only deals with chars, so a 225 long array is good enough, this array can be a good indicator and is small in size.
	Here in the solution, the second methods didn't use extra datastructure, it uses bit vector, which is very impressive!!

1.2
Write code to reverse a C-Style String (C-String means that “abcd” is represented as five characters, including the null character )

1.3
Design an algorithm and write code to remove the duplicate characters in a string without using any additional buffer NOTE: One or two additional variables are fine An extra copy of the array is not
FOLLOW UP Write the test cases for this method

1.4 Write a method to decide if two strings are anagrams or not.

1.5 Write a method to replace all spaces in a string with ‘%20’.

1.6 Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to rotate the image by 90 degrees. Can you do this in place? (rot.cpp)

1.7 Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column is set to 0. (rc.cpp)

1.8 Assume you have a method isSubstring which checks if one word is a substring of another. Given two strings, s1 and s2, write code to check if s2 is a rotation of s1 using only one call to isSubstring (i.e., “waterbottle” is a rotation of “erbottlewat”). (rot2.cpp, repeat s2 to check rotation)
	comments: i didn't check whether two strings are of the same length, equal or not first, 
			and I didn't check the case when they are both empty strings.
			I should be much more careful during the interviews. LESSON, LESSON, LESSON

	*	assert (statement), if statement if false, then exit.
	*	string==, two check two string equal or not, no need to be exactly same place, but as long as they hold same characters.
	* 	string.append;	
